{"version":3,"sources":["SquadQuest/SquadQuest.module.scss","SquadQuest/SquadQuest.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","timeWithZero","val","getTime","time","Date","now","hours","String","getHours","minutes","getMinutes","seconds","getSeconds","hourKey","SquadQuest","useState","data","setData","actual","setActual","input","setInput","setTime","timer","useRef","useEffect","max","randomSquad","Math","floor","random","squadsArray","i","push","id","value","squads","current","setInterval","clearInterval","className","styles","container","grid","map","squad","actualSquad","type","onChange","e","target","onClick","answer","timeKey","top","right","bottom","left","alert","checkAnswer","mathFloor","findAnswer","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.5ee9a26d.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"SquadQuest_container__3dojK\",\"grid\":\"SquadQuest_grid__2IFwM\",\"squad\":\"SquadQuest_squad__2129C\",\"actualSquad\":\"SquadQuest_actualSquad__3IPkw\"};","import styles from './SquadQuest.module.scss';\r\nimport {useEffect, useRef, useState} from \"react\";\r\n\r\n\r\nconst timeWithZero = (val) => {\r\n    if(val < 10) {\r\n        return '0' + val;\r\n    } else {\r\n        return val;\r\n    }\r\n}\r\n\r\nconst getTime = () => {\r\n    const time = new Date(Date.now());\r\n\r\n    return { hours: String(timeWithZero(time.getHours())), minutes: String(timeWithZero(time.getMinutes())), seconds: String(timeWithZero(time.getSeconds())) }\r\n}\r\n\r\nconst hourKey = {\r\n    '1': 1,\r\n    '2': 2,\r\n    '3': 2,\r\n    '4': 2,\r\n    '5': 3,\r\n    '6': 3,\r\n    '7': 3,\r\n    '8': 4,\r\n    '9': 4,\r\n    '10': 4,\r\n    '11': 1,\r\n    '00': 1,\r\n}\r\n\r\nexport const SquadQuest = () => {\r\n    const [ data, setData ] = useState([]);\r\n    const [ actual, setActual ] = useState(0);\r\n    const [ input, setInput ] = useState('');\r\n    const [ time, setTime ] = useState(getTime());\r\n\r\n    const timer = useRef();\r\n\r\n    const test = 100;\r\n\r\n    const getRandomInt = (max) => {\r\n        return Math.floor(Math.random() * max);\r\n    }\r\n\r\n    const squads = (random) => {\r\n        const squadsArray = [];\r\n\r\n        for (let i = 0; i < test; i ++) {\r\n            if (i === random) {\r\n                squadsArray.push({id: i + 1, value: true});\r\n            } else {\r\n                squadsArray.push({id: i + 1, value: false});\r\n            }\r\n        }\r\n\r\n        return squadsArray;\r\n    }\r\n\r\n    useEffect(() => {\r\n        const randomSquad = getRandomInt(test);\r\n        setActual(randomSquad + 1);\r\n        setData(squads(randomSquad));\r\n\r\n\r\n        timer.current = setInterval(() => {\r\n            setTime(getTime())\r\n        }, 1000)\r\n\r\n        return () => {\r\n            clearInterval(timer.current)\r\n        }\r\n    }, [])\r\n\r\n    const findAnswer = () => {\r\n        const mathFloor = Math.floor((actual - 1)/10);\r\n\r\n        return  {\r\n            top: mathFloor,\r\n            right: 9 - (actual - mathFloor * 10 - 1),\r\n            bottom: 9 -mathFloor,\r\n            left: actual - mathFloor * 10 - 1,\r\n        }\r\n    }\r\n\r\n    const checkAnswer = (answer) => {\r\n        const timeKey = time.hours < 13 ? time.hours : time.hours - 12;\r\n\r\n        switch (hourKey[timeKey]) {\r\n            case 1: return String(answer.top) + String(answer.right) + String(answer.bottom) + String(answer.left);\r\n            case 2: return String(answer.right) + String(answer.bottom) + String(answer.left) + String(answer.top);\r\n            case 3: return String(answer.bottom) + String(answer.left) + String(answer.top) + String(answer.right);\r\n            case 4: return String(answer.left) + String(answer.top) + String(answer.right) + String(answer.bottom);\r\n            default: alert('problem');\r\n        }\r\n    }\r\n\r\n    const onChangeInput = (e) => {\r\n        setInput(e.target.value)\r\n    }\r\n\r\n    const onButtonClick = () => {\r\n        if (input === checkAnswer(findAnswer())) {\r\n            alert('Поздравляю, свяжись со мной. Мой telegram: @ohris')\r\n        } else {\r\n            alert('Не сдавайся =)')\r\n        }\r\n    }\r\n\r\n    return <div>\r\n        <div  className={styles.container}>\r\n            <h1>Squad Quest</h1>\r\n            <h2>{time.hours < 13 ? time.hours : time.hours - 12}:{time.minutes}:{time.seconds} {time.hours > 12 ? 'pm':'am'}</h2>\r\n            <div className={styles.grid}>\r\n                {data.map((squad) => <div key={squad.id} className={`${styles.squad} ${squad.value ? styles.actualSquad : ''}`}/>)}\r\n            </div>\r\n                <input type={'number'} value={input} onChange={onChangeInput}/>\r\n            <button onClick={onButtonClick}>Try!</button>\r\n        </div>\r\n    </div>\r\n}","import './App.css';\nimport {SquadQuest} from \"./SquadQuest/SquadQuest\";\n\nfunction App() {\n  return (\n    <div>\n      <SquadQuest/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}